import binascii
import struct

import asynctest

from vallox_websocket_api import PROFILE, Vallox
from vallox_websocket_api.exceptions import ValloxInvalidInputException

from tests.decorators import with_client


class TestValloxSetTemperature(asynctest.TestCase):
    def setUp(self):
        self.client = Vallox("127.0.0.1")

        self.client.set_values = asynctest.CoroutineMock()

    async def checkSetTemperature(self, profile, temperature, set_values_dict):
        await self.client.set_temperature(profile, temperature)

        self.client.set_values.assert_called_once_with(set_values_dict)

    async def testSetTemperatureHome(self):
        await self.checkSetTemperature(
            PROFILE.HOME, 19, {"A_CYC_HOME_AIR_TEMP_TARGET": 19}
        )

    async def testSetTemperatureAway(self):
        await self.checkSetTemperature(
            PROFILE.AWAY, 19, {"A_CYC_AWAY_AIR_TEMP_TARGET": 19}
        )

    async def testSetTemperatureBoost(self):
        await self.checkSetTemperature(
            PROFILE.BOOST, 19, {"A_CYC_BOOST_AIR_TEMP_TARGET": 19}
        )

    async def testSetTemperatureWrong(self):
        with self.assertRaises(ValloxInvalidInputException):
            await self.checkSetTemperature(
                PROFILE.FIREPLACE, 19, {"A_CYC_FIREPLACE_AIR_TEMP_TARGET": 19}
            )


class TestValloxGetTemperature(asynctest.TestCase):
    def setUp(self):
        self.client = Vallox("127.0.0.1")

    async def checkGetTemperatureForProfile(
        self, fetch_metrics_result, profile, expected_temperature
    ):
        self.client.fetch_metrics = asynctest.CoroutineMock(
            return_value=fetch_metrics_result
        )

        self.assertEqual(
            await self.client.get_temperature(profile), expected_temperature
        )

        self.client.fetch_metrics.assert_called_once_with(
            list(fetch_metrics_result.keys())
        )

    async def testGetTemperatureForProfileHome(self):
        await self.checkGetTemperatureForProfile(
            {"A_CYC_HOME_AIR_TEMP_TARGET": 19}, PROFILE.HOME, 19
        )

    @with_client
    async def testFetchMetric(self, client, ws):
        """
        IoQueue.KItemTypeFetch = 3
        VlxDevConstants.WS_WEB_UI_COMMAND_READ_TABLES; = 246
        item.value = 0;
        checksum = 249
        Uint16Array(4) [3, 246, 0, 249]
        """
        ws.recv.return_value = binascii.unhexlify(
            "0024000000000000000000000000000001000800030000000000000061df98b100030003203fb9500331000000000000000000560000000000000000000000000000000000000000001b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002b000f732a6ca969a171d1730800010000022700000028000000000000000001a6029e000100000028ffffffffffffffffffffffffffffffffffffffffffffffff000000000000000057c503e8ffffffffffff000000190000000000010000000000000000000300001b98012000a50000000000000000001e00010000000100000000000000000007001b000f001700010012000200070044000000010000000000000007003200320001000000000000001e0000c0a80501ffffff0000000000000000000000000000000000000000000000000000000000c0a8050c86076097f78844b7ac4db61e502fe4f2004c004c000100c00101001c001e000a00320000003703840000708f00320032000a0000000000010000000a721f0000000000010000000f728300000000000000000064715700000000000000000000000000000000000000010037001e000000000000000068bf71bb000083910000002600b4000000010001000000010001001e000f00080001001200000003000000000000000000000017000003e90000000000000001000100010000000a003200010000000000000000000000000000000000000000001000000000000000000000000000540048000000000000000000000000000000ca
        )

        self.assertEqual(20.0, await client.fetch_metric("A_CYC_HOME_AIR_TEMP_TARGET"))

        ws.send.assert_called_once_with(struct.pack("HHHH", 3, 246, 0, 249))
